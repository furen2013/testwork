// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageGS2Gate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GS2GateLoginOKACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2GateLoginOKACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2GateErrorACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2GateErrorACK_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GS2GateErrorACK_enResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageGS2Gate_2eproto() {
  protobuf_AddDesc_MessageGS2Gate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageGS2Gate.proto");
  GOOGLE_CHECK(file != NULL);
  GS2GateLoginOKACK_descriptor_ = file->message_type(0);
  static const int GS2GateLoginOKACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, icon_),
  };
  GS2GateLoginOKACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2GateLoginOKACK_descriptor_,
      GS2GateLoginOKACK::default_instance_,
      GS2GateLoginOKACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2GateLoginOKACK));
  GS2GateErrorACK_descriptor_ = file->message_type(1);
  static const int GS2GateErrorACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateErrorACK, en_),
  };
  GS2GateErrorACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2GateErrorACK_descriptor_,
      GS2GateErrorACK::default_instance_,
      GS2GateErrorACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateErrorACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateErrorACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2GateErrorACK));
  GS2GateErrorACK_enResult_descriptor_ = GS2GateErrorACK_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageGS2Gate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2GateLoginOKACK_descriptor_, &GS2GateLoginOKACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2GateErrorACK_descriptor_, &GS2GateErrorACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageGS2Gate_2eproto() {
  delete GS2GateLoginOKACK::default_instance_;
  delete GS2GateLoginOKACK_reflection_;
  delete GS2GateErrorACK::default_instance_;
  delete GS2GateErrorACK_reflection_;
}

void protobuf_AddDesc_MessageGS2Gate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_MsgHead_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024MessageGS2Gate.proto\032\rMsgHead.proto\">\n"
    "\021GS2GateLoginOKACK\022\014\n\004name\030\001 \002(\t\022\r\n\005leve"
    "l\030\002 \002(\005\022\014\n\004icon\030\003 \002(\005\"h\n\017GS2GateErrorACK"
    "\022%\n\002en\030\001 \002(\0162\031.GS2GateErrorACK.enResult\""
    ".\n\010enResult\022\r\n\tLG_UNKNOW\020\000\022\023\n\017LG_ALREADY"
    "LOGIN\020\001", 207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageGS2Gate.proto", &protobuf_RegisterTypes);
  GS2GateLoginOKACK::default_instance_ = new GS2GateLoginOKACK();
  GS2GateErrorACK::default_instance_ = new GS2GateErrorACK();
  GS2GateLoginOKACK::default_instance_->InitAsDefaultInstance();
  GS2GateErrorACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageGS2Gate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageGS2Gate_2eproto {
  StaticDescriptorInitializer_MessageGS2Gate_2eproto() {
    protobuf_AddDesc_MessageGS2Gate_2eproto();
  }
} static_descriptor_initializer_MessageGS2Gate_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GS2GateLoginOKACK::kNameFieldNumber;
const int GS2GateLoginOKACK::kLevelFieldNumber;
const int GS2GateLoginOKACK::kIconFieldNumber;
#endif  // !_MSC_VER

GS2GateLoginOKACK::GS2GateLoginOKACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2GateLoginOKACK::InitAsDefaultInstance() {
}

GS2GateLoginOKACK::GS2GateLoginOKACK(const GS2GateLoginOKACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2GateLoginOKACK::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  icon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2GateLoginOKACK::~GS2GateLoginOKACK() {
  SharedDtor();
}

void GS2GateLoginOKACK::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GS2GateLoginOKACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2GateLoginOKACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2GateLoginOKACK_descriptor_;
}

const GS2GateLoginOKACK& GS2GateLoginOKACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageGS2Gate_2eproto();  return *default_instance_;
}

GS2GateLoginOKACK* GS2GateLoginOKACK::default_instance_ = NULL;

GS2GateLoginOKACK* GS2GateLoginOKACK::New() const {
  return new GS2GateLoginOKACK;
}

void GS2GateLoginOKACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    icon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2GateLoginOKACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_icon;
        break;
      }
      
      // required int32 icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2GateLoginOKACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // required int32 icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->icon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2GateLoginOKACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // required int32 icon = 3;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->icon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2GateLoginOKACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2GateLoginOKACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2GateLoginOKACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2GateLoginOKACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2GateLoginOKACK::MergeFrom(const GS2GateLoginOKACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2GateLoginOKACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2GateLoginOKACK::CopyFrom(const GS2GateLoginOKACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2GateLoginOKACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GS2GateLoginOKACK::Swap(GS2GateLoginOKACK* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2GateLoginOKACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2GateLoginOKACK_descriptor_;
  metadata.reflection = GS2GateLoginOKACK_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GS2GateErrorACK_enResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2GateErrorACK_enResult_descriptor_;
}
bool GS2GateErrorACK_enResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GS2GateErrorACK_enResult GS2GateErrorACK::LG_UNKNOW;
const GS2GateErrorACK_enResult GS2GateErrorACK::LG_ALREADYLOGIN;
const GS2GateErrorACK_enResult GS2GateErrorACK::enResult_MIN;
const GS2GateErrorACK_enResult GS2GateErrorACK::enResult_MAX;
const int GS2GateErrorACK::enResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GS2GateErrorACK::kEnFieldNumber;
#endif  // !_MSC_VER

GS2GateErrorACK::GS2GateErrorACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2GateErrorACK::InitAsDefaultInstance() {
}

GS2GateErrorACK::GS2GateErrorACK(const GS2GateErrorACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2GateErrorACK::SharedCtor() {
  _cached_size_ = 0;
  en_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2GateErrorACK::~GS2GateErrorACK() {
  SharedDtor();
}

void GS2GateErrorACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2GateErrorACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2GateErrorACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2GateErrorACK_descriptor_;
}

const GS2GateErrorACK& GS2GateErrorACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageGS2Gate_2eproto();  return *default_instance_;
}

GS2GateErrorACK* GS2GateErrorACK::default_instance_ = NULL;

GS2GateErrorACK* GS2GateErrorACK::New() const {
  return new GS2GateErrorACK;
}

void GS2GateErrorACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    en_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2GateErrorACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GS2GateErrorACK.enResult en = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GS2GateErrorACK_enResult_IsValid(value)) {
            set_en(static_cast< ::GS2GateErrorACK_enResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2GateErrorACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GS2GateErrorACK.enResult en = 1;
  if (has_en()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->en(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2GateErrorACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GS2GateErrorACK.enResult en = 1;
  if (has_en()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->en(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2GateErrorACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GS2GateErrorACK.enResult en = 1;
    if (has_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->en());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2GateErrorACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2GateErrorACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2GateErrorACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2GateErrorACK::MergeFrom(const GS2GateErrorACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_en()) {
      set_en(from.en());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2GateErrorACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2GateErrorACK::CopyFrom(const GS2GateErrorACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2GateErrorACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GS2GateErrorACK::Swap(GS2GateErrorACK* other) {
  if (other != this) {
    std::swap(en_, other->en_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2GateErrorACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2GateErrorACK_descriptor_;
  metadata.reflection = GS2GateErrorACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
