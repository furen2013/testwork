// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageGS2Gate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* tgTechnology_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tgTechnology_reflection_ = NULL;
const ::google::protobuf::Descriptor* tgTechLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tgTechLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2GateLoginOKACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2GateLoginOKACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2GateErrorACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2GateErrorACK_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GS2GateErrorACK_enResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageGS2Gate_2eproto() {
  protobuf_AddDesc_MessageGS2Gate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageGS2Gate.proto");
  GOOGLE_CHECK(file != NULL);
  tgTechnology_descriptor_ = file->message_type(0);
  static const int tgTechnology_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgTechnology, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgTechnology, value_),
  };
  tgTechnology_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tgTechnology_descriptor_,
      tgTechnology::default_instance_,
      tgTechnology_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgTechnology, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgTechnology, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tgTechnology));
  tgTechLevel_descriptor_ = file->message_type(1);
  static const int tgTechLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgTechLevel, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgTechLevel, tech_),
  };
  tgTechLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tgTechLevel_descriptor_,
      tgTechLevel::default_instance_,
      tgTechLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgTechLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgTechLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tgTechLevel));
  GS2GateLoginOKACK_descriptor_ = file->message_type(2);
  static const int GS2GateLoginOKACK_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, ruby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, manure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, seedcopper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, seedsilver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, seedgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, techvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, tech_),
  };
  GS2GateLoginOKACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2GateLoginOKACK_descriptor_,
      GS2GateLoginOKACK::default_instance_,
      GS2GateLoginOKACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateLoginOKACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2GateLoginOKACK));
  GS2GateErrorACK_descriptor_ = file->message_type(3);
  static const int GS2GateErrorACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateErrorACK, en_),
  };
  GS2GateErrorACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2GateErrorACK_descriptor_,
      GS2GateErrorACK::default_instance_,
      GS2GateErrorACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateErrorACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2GateErrorACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2GateErrorACK));
  GS2GateErrorACK_enResult_descriptor_ = GS2GateErrorACK_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageGS2Gate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tgTechnology_descriptor_, &tgTechnology::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tgTechLevel_descriptor_, &tgTechLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2GateLoginOKACK_descriptor_, &GS2GateLoginOKACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2GateErrorACK_descriptor_, &GS2GateErrorACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageGS2Gate_2eproto() {
  delete tgTechnology::default_instance_;
  delete tgTechnology_reflection_;
  delete tgTechLevel::default_instance_;
  delete tgTechLevel_reflection_;
  delete GS2GateLoginOKACK::default_instance_;
  delete GS2GateLoginOKACK_reflection_;
  delete GS2GateErrorACK::default_instance_;
  delete GS2GateErrorACK_reflection_;
}

void protobuf_AddDesc_MessageGS2Gate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_MsgHead_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024MessageGS2Gate.proto\032\rMsgHead.proto\")\n"
    "\014tgTechnology\022\n\n\002id\030\001 \002(\005\022\r\n\005value\030\002 \002(\005"
    "\"9\n\013tgTechLevel\022\r\n\005level\030\001 \002(\005\022\033\n\004tech\030\002"
    " \003(\0132\r.tgTechnology\"\323\001\n\021GS2GateLoginOKAC"
    "K\022\014\n\004name\030\001 \002(\t\022\r\n\005level\030\002 \002(\005\022\014\n\004icon\030\003"
    " \002(\t\022\014\n\004gold\030\004 \002(\005\022\014\n\004ruby\030\005 \002(\005\022\016\n\006manu"
    "re\030\006 \002(\005\022\022\n\nseedCopper\030\007 \002(\005\022\022\n\nseedSilv"
    "er\030\010 \002(\005\022\020\n\010seedGold\030\t \002(\005\022\021\n\ttechvalue\030"
    "\n \002(\005\022\032\n\004tech\030\013 \003(\0132\014.tgTechLevel\"h\n\017GS2"
    "GateErrorACK\022%\n\002en\030\001 \002(\0162\031.GS2GateErrorA"
    "CK.enResult\".\n\010enResult\022\r\n\tLG_UNKNOW\020\000\022\023"
    "\n\017LG_ALREADYLOGIN\020\001", 459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageGS2Gate.proto", &protobuf_RegisterTypes);
  tgTechnology::default_instance_ = new tgTechnology();
  tgTechLevel::default_instance_ = new tgTechLevel();
  GS2GateLoginOKACK::default_instance_ = new GS2GateLoginOKACK();
  GS2GateErrorACK::default_instance_ = new GS2GateErrorACK();
  tgTechnology::default_instance_->InitAsDefaultInstance();
  tgTechLevel::default_instance_->InitAsDefaultInstance();
  GS2GateLoginOKACK::default_instance_->InitAsDefaultInstance();
  GS2GateErrorACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageGS2Gate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageGS2Gate_2eproto {
  StaticDescriptorInitializer_MessageGS2Gate_2eproto() {
    protobuf_AddDesc_MessageGS2Gate_2eproto();
  }
} static_descriptor_initializer_MessageGS2Gate_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int tgTechnology::kIdFieldNumber;
const int tgTechnology::kValueFieldNumber;
#endif  // !_MSC_VER

tgTechnology::tgTechnology()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tgTechnology::InitAsDefaultInstance() {
}

tgTechnology::tgTechnology(const tgTechnology& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tgTechnology::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tgTechnology::~tgTechnology() {
  SharedDtor();
}

void tgTechnology::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tgTechnology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tgTechnology::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tgTechnology_descriptor_;
}

const tgTechnology& tgTechnology::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageGS2Gate_2eproto();  return *default_instance_;
}

tgTechnology* tgTechnology::default_instance_ = NULL;

tgTechnology* tgTechnology::New() const {
  return new tgTechnology;
}

void tgTechnology::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tgTechnology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tgTechnology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tgTechnology::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tgTechnology::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tgTechnology::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tgTechnology* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tgTechnology*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tgTechnology::MergeFrom(const tgTechnology& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tgTechnology::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tgTechnology::CopyFrom(const tgTechnology& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tgTechnology::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void tgTechnology::Swap(tgTechnology* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tgTechnology::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tgTechnology_descriptor_;
  metadata.reflection = tgTechnology_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tgTechLevel::kLevelFieldNumber;
const int tgTechLevel::kTechFieldNumber;
#endif  // !_MSC_VER

tgTechLevel::tgTechLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tgTechLevel::InitAsDefaultInstance() {
}

tgTechLevel::tgTechLevel(const tgTechLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tgTechLevel::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tgTechLevel::~tgTechLevel() {
  SharedDtor();
}

void tgTechLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tgTechLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tgTechLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tgTechLevel_descriptor_;
}

const tgTechLevel& tgTechLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageGS2Gate_2eproto();  return *default_instance_;
}

tgTechLevel* tgTechLevel::default_instance_ = NULL;

tgTechLevel* tgTechLevel::New() const {
  return new tgTechLevel;
}

void tgTechLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  tech_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tgTechLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tech;
        break;
      }
      
      // repeated .tgTechnology tech = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tech:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tech()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tech;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tgTechLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // repeated .tgTechnology tech = 2;
  for (int i = 0; i < this->tech_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tech(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tgTechLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // repeated .tgTechnology tech = 2;
  for (int i = 0; i < this->tech_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tech(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tgTechLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  // repeated .tgTechnology tech = 2;
  total_size += 1 * this->tech_size();
  for (int i = 0; i < this->tech_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tech(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tgTechLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tgTechLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tgTechLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tgTechLevel::MergeFrom(const tgTechLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  tech_.MergeFrom(from.tech_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tgTechLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tgTechLevel::CopyFrom(const tgTechLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tgTechLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < tech_size(); i++) {
    if (!this->tech(i).IsInitialized()) return false;
  }
  return true;
}

void tgTechLevel::Swap(tgTechLevel* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    tech_.Swap(&other->tech_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tgTechLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tgTechLevel_descriptor_;
  metadata.reflection = tgTechLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2GateLoginOKACK::kNameFieldNumber;
const int GS2GateLoginOKACK::kLevelFieldNumber;
const int GS2GateLoginOKACK::kIconFieldNumber;
const int GS2GateLoginOKACK::kGoldFieldNumber;
const int GS2GateLoginOKACK::kRubyFieldNumber;
const int GS2GateLoginOKACK::kManureFieldNumber;
const int GS2GateLoginOKACK::kSeedCopperFieldNumber;
const int GS2GateLoginOKACK::kSeedSilverFieldNumber;
const int GS2GateLoginOKACK::kSeedGoldFieldNumber;
const int GS2GateLoginOKACK::kTechvalueFieldNumber;
const int GS2GateLoginOKACK::kTechFieldNumber;
#endif  // !_MSC_VER

GS2GateLoginOKACK::GS2GateLoginOKACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2GateLoginOKACK::InitAsDefaultInstance() {
}

GS2GateLoginOKACK::GS2GateLoginOKACK(const GS2GateLoginOKACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2GateLoginOKACK::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = 0;
  ruby_ = 0;
  manure_ = 0;
  seedcopper_ = 0;
  seedsilver_ = 0;
  seedgold_ = 0;
  techvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2GateLoginOKACK::~GS2GateLoginOKACK() {
  SharedDtor();
}

void GS2GateLoginOKACK::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void GS2GateLoginOKACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2GateLoginOKACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2GateLoginOKACK_descriptor_;
}

const GS2GateLoginOKACK& GS2GateLoginOKACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageGS2Gate_2eproto();  return *default_instance_;
}

GS2GateLoginOKACK* GS2GateLoginOKACK::default_instance_ = NULL;

GS2GateLoginOKACK* GS2GateLoginOKACK::New() const {
  return new GS2GateLoginOKACK;
}

void GS2GateLoginOKACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    gold_ = 0;
    ruby_ = 0;
    manure_ = 0;
    seedcopper_ = 0;
    seedsilver_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    seedgold_ = 0;
    techvalue_ = 0;
  }
  tech_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2GateLoginOKACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icon;
        break;
      }
      
      // required string icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }
      
      // required int32 gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ruby;
        break;
      }
      
      // required int32 ruby = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ruby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ruby_)));
          set_has_ruby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_manure;
        break;
      }
      
      // required int32 manure = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manure_)));
          set_has_manure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_seedCopper;
        break;
      }
      
      // required int32 seedCopper = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seedCopper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seedcopper_)));
          set_has_seedcopper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_seedSilver;
        break;
      }
      
      // required int32 seedSilver = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seedSilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seedsilver_)));
          set_has_seedsilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_seedGold;
        break;
      }
      
      // required int32 seedGold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seedGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seedgold_)));
          set_has_seedgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_techvalue;
        break;
      }
      
      // required int32 techvalue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_techvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &techvalue_)));
          set_has_techvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tech;
        break;
      }
      
      // repeated .tgTechLevel tech = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tech:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tech()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tech;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2GateLoginOKACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // required string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->icon(), output);
  }
  
  // required int32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }
  
  // required int32 ruby = 5;
  if (has_ruby()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ruby(), output);
  }
  
  // required int32 manure = 6;
  if (has_manure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->manure(), output);
  }
  
  // required int32 seedCopper = 7;
  if (has_seedcopper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->seedcopper(), output);
  }
  
  // required int32 seedSilver = 8;
  if (has_seedsilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->seedsilver(), output);
  }
  
  // required int32 seedGold = 9;
  if (has_seedgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seedgold(), output);
  }
  
  // required int32 techvalue = 10;
  if (has_techvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->techvalue(), output);
  }
  
  // repeated .tgTechLevel tech = 11;
  for (int i = 0; i < this->tech_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tech(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2GateLoginOKACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // required string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon(), target);
  }
  
  // required int32 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gold(), target);
  }
  
  // required int32 ruby = 5;
  if (has_ruby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ruby(), target);
  }
  
  // required int32 manure = 6;
  if (has_manure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->manure(), target);
  }
  
  // required int32 seedCopper = 7;
  if (has_seedcopper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->seedcopper(), target);
  }
  
  // required int32 seedSilver = 8;
  if (has_seedsilver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->seedsilver(), target);
  }
  
  // required int32 seedGold = 9;
  if (has_seedgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seedgold(), target);
  }
  
  // required int32 techvalue = 10;
  if (has_techvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->techvalue(), target);
  }
  
  // repeated .tgTechLevel tech = 11;
  for (int i = 0; i < this->tech_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tech(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2GateLoginOKACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // required int32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }
    
    // required int32 ruby = 5;
    if (has_ruby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ruby());
    }
    
    // required int32 manure = 6;
    if (has_manure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manure());
    }
    
    // required int32 seedCopper = 7;
    if (has_seedcopper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seedcopper());
    }
    
    // required int32 seedSilver = 8;
    if (has_seedsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seedsilver());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 seedGold = 9;
    if (has_seedgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seedgold());
    }
    
    // required int32 techvalue = 10;
    if (has_techvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->techvalue());
    }
    
  }
  // repeated .tgTechLevel tech = 11;
  total_size += 1 * this->tech_size();
  for (int i = 0; i < this->tech_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tech(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2GateLoginOKACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2GateLoginOKACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2GateLoginOKACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2GateLoginOKACK::MergeFrom(const GS2GateLoginOKACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  tech_.MergeFrom(from.tech_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_ruby()) {
      set_ruby(from.ruby());
    }
    if (from.has_manure()) {
      set_manure(from.manure());
    }
    if (from.has_seedcopper()) {
      set_seedcopper(from.seedcopper());
    }
    if (from.has_seedsilver()) {
      set_seedsilver(from.seedsilver());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seedgold()) {
      set_seedgold(from.seedgold());
    }
    if (from.has_techvalue()) {
      set_techvalue(from.techvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2GateLoginOKACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2GateLoginOKACK::CopyFrom(const GS2GateLoginOKACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2GateLoginOKACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  for (int i = 0; i < tech_size(); i++) {
    if (!this->tech(i).IsInitialized()) return false;
  }
  return true;
}

void GS2GateLoginOKACK::Swap(GS2GateLoginOKACK* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(icon_, other->icon_);
    std::swap(gold_, other->gold_);
    std::swap(ruby_, other->ruby_);
    std::swap(manure_, other->manure_);
    std::swap(seedcopper_, other->seedcopper_);
    std::swap(seedsilver_, other->seedsilver_);
    std::swap(seedgold_, other->seedgold_);
    std::swap(techvalue_, other->techvalue_);
    tech_.Swap(&other->tech_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2GateLoginOKACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2GateLoginOKACK_descriptor_;
  metadata.reflection = GS2GateLoginOKACK_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GS2GateErrorACK_enResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2GateErrorACK_enResult_descriptor_;
}
bool GS2GateErrorACK_enResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GS2GateErrorACK_enResult GS2GateErrorACK::LG_UNKNOW;
const GS2GateErrorACK_enResult GS2GateErrorACK::LG_ALREADYLOGIN;
const GS2GateErrorACK_enResult GS2GateErrorACK::enResult_MIN;
const GS2GateErrorACK_enResult GS2GateErrorACK::enResult_MAX;
const int GS2GateErrorACK::enResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GS2GateErrorACK::kEnFieldNumber;
#endif  // !_MSC_VER

GS2GateErrorACK::GS2GateErrorACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2GateErrorACK::InitAsDefaultInstance() {
}

GS2GateErrorACK::GS2GateErrorACK(const GS2GateErrorACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2GateErrorACK::SharedCtor() {
  _cached_size_ = 0;
  en_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2GateErrorACK::~GS2GateErrorACK() {
  SharedDtor();
}

void GS2GateErrorACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2GateErrorACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2GateErrorACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2GateErrorACK_descriptor_;
}

const GS2GateErrorACK& GS2GateErrorACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageGS2Gate_2eproto();  return *default_instance_;
}

GS2GateErrorACK* GS2GateErrorACK::default_instance_ = NULL;

GS2GateErrorACK* GS2GateErrorACK::New() const {
  return new GS2GateErrorACK;
}

void GS2GateErrorACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    en_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2GateErrorACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GS2GateErrorACK.enResult en = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GS2GateErrorACK_enResult_IsValid(value)) {
            set_en(static_cast< ::GS2GateErrorACK_enResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2GateErrorACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GS2GateErrorACK.enResult en = 1;
  if (has_en()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->en(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2GateErrorACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GS2GateErrorACK.enResult en = 1;
  if (has_en()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->en(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2GateErrorACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GS2GateErrorACK.enResult en = 1;
    if (has_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->en());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2GateErrorACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2GateErrorACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2GateErrorACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2GateErrorACK::MergeFrom(const GS2GateErrorACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_en()) {
      set_en(from.en());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2GateErrorACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2GateErrorACK::CopyFrom(const GS2GateErrorACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2GateErrorACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GS2GateErrorACK::Swap(GS2GateErrorACK* other) {
  if (other != this) {
    std::swap(en_, other->en_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2GateErrorACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2GateErrorACK_descriptor_;
  metadata.reflection = GS2GateErrorACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
