// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageTechnologyC2S.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgTechnologyStateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTechnologyStateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgOpenTechLevelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgOpenTechLevelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgApplyAddTechInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgApplyAddTechInfoReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageTechnologyC2S_2eproto() {
  protobuf_AddDesc_MessageTechnologyC2S_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageTechnologyC2S.proto");
  GOOGLE_CHECK(file != NULL);
  MsgTechnologyStateReq_descriptor_ = file->message_type(0);
  static const int MsgTechnologyStateReq_offsets_[1] = {
  };
  MsgTechnologyStateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTechnologyStateReq_descriptor_,
      MsgTechnologyStateReq::default_instance_,
      MsgTechnologyStateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechnologyStateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechnologyStateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTechnologyStateReq));
  MsgOpenTechLevelReq_descriptor_ = file->message_type(1);
  static const int MsgOpenTechLevelReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOpenTechLevelReq, level_),
  };
  MsgOpenTechLevelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgOpenTechLevelReq_descriptor_,
      MsgOpenTechLevelReq::default_instance_,
      MsgOpenTechLevelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOpenTechLevelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOpenTechLevelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgOpenTechLevelReq));
  MsgApplyAddTechInfoReq_descriptor_ = file->message_type(2);
  static const int MsgApplyAddTechInfoReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyAddTechInfoReq, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyAddTechInfoReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyAddTechInfoReq, addcount_),
  };
  MsgApplyAddTechInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgApplyAddTechInfoReq_descriptor_,
      MsgApplyAddTechInfoReq::default_instance_,
      MsgApplyAddTechInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyAddTechInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyAddTechInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgApplyAddTechInfoReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageTechnologyC2S_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTechnologyStateReq_descriptor_, &MsgTechnologyStateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgOpenTechLevelReq_descriptor_, &MsgOpenTechLevelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgApplyAddTechInfoReq_descriptor_, &MsgApplyAddTechInfoReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageTechnologyC2S_2eproto() {
  delete MsgTechnologyStateReq::default_instance_;
  delete MsgTechnologyStateReq_reflection_;
  delete MsgOpenTechLevelReq::default_instance_;
  delete MsgOpenTechLevelReq_reflection_;
  delete MsgApplyAddTechInfoReq::default_instance_;
  delete MsgApplyAddTechInfoReq_reflection_;
}

void protobuf_AddDesc_MessageTechnologyC2S_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_MsgHead_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032MessageTechnologyC2S.proto\032\rMsgHead.pr"
    "oto\"\027\n\025MsgTechnologyStateReq\"$\n\023MsgOpenT"
    "echLevelReq\022\r\n\005level\030\001 \002(\005\"E\n\026MsgApplyAd"
    "dTechInfoReq\022\r\n\005level\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\022"
    "\020\n\010addcount\030\003 \002(\005", 177);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageTechnologyC2S.proto", &protobuf_RegisterTypes);
  MsgTechnologyStateReq::default_instance_ = new MsgTechnologyStateReq();
  MsgOpenTechLevelReq::default_instance_ = new MsgOpenTechLevelReq();
  MsgApplyAddTechInfoReq::default_instance_ = new MsgApplyAddTechInfoReq();
  MsgTechnologyStateReq::default_instance_->InitAsDefaultInstance();
  MsgOpenTechLevelReq::default_instance_->InitAsDefaultInstance();
  MsgApplyAddTechInfoReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageTechnologyC2S_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageTechnologyC2S_2eproto {
  StaticDescriptorInitializer_MessageTechnologyC2S_2eproto() {
    protobuf_AddDesc_MessageTechnologyC2S_2eproto();
  }
} static_descriptor_initializer_MessageTechnologyC2S_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgTechnologyStateReq::MsgTechnologyStateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgTechnologyStateReq::InitAsDefaultInstance() {
}

MsgTechnologyStateReq::MsgTechnologyStateReq(const MsgTechnologyStateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgTechnologyStateReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTechnologyStateReq::~MsgTechnologyStateReq() {
  SharedDtor();
}

void MsgTechnologyStateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTechnologyStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTechnologyStateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTechnologyStateReq_descriptor_;
}

const MsgTechnologyStateReq& MsgTechnologyStateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTechnologyC2S_2eproto();  return *default_instance_;
}

MsgTechnologyStateReq* MsgTechnologyStateReq::default_instance_ = NULL;

MsgTechnologyStateReq* MsgTechnologyStateReq::New() const {
  return new MsgTechnologyStateReq;
}

void MsgTechnologyStateReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTechnologyStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgTechnologyStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTechnologyStateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTechnologyStateReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTechnologyStateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTechnologyStateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTechnologyStateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTechnologyStateReq::MergeFrom(const MsgTechnologyStateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTechnologyStateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTechnologyStateReq::CopyFrom(const MsgTechnologyStateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTechnologyStateReq::IsInitialized() const {
  
  return true;
}

void MsgTechnologyStateReq::Swap(MsgTechnologyStateReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTechnologyStateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTechnologyStateReq_descriptor_;
  metadata.reflection = MsgTechnologyStateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgOpenTechLevelReq::kLevelFieldNumber;
#endif  // !_MSC_VER

MsgOpenTechLevelReq::MsgOpenTechLevelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgOpenTechLevelReq::InitAsDefaultInstance() {
}

MsgOpenTechLevelReq::MsgOpenTechLevelReq(const MsgOpenTechLevelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgOpenTechLevelReq::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgOpenTechLevelReq::~MsgOpenTechLevelReq() {
  SharedDtor();
}

void MsgOpenTechLevelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgOpenTechLevelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgOpenTechLevelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgOpenTechLevelReq_descriptor_;
}

const MsgOpenTechLevelReq& MsgOpenTechLevelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTechnologyC2S_2eproto();  return *default_instance_;
}

MsgOpenTechLevelReq* MsgOpenTechLevelReq::default_instance_ = NULL;

MsgOpenTechLevelReq* MsgOpenTechLevelReq::New() const {
  return new MsgOpenTechLevelReq;
}

void MsgOpenTechLevelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgOpenTechLevelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgOpenTechLevelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgOpenTechLevelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgOpenTechLevelReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgOpenTechLevelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgOpenTechLevelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgOpenTechLevelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgOpenTechLevelReq::MergeFrom(const MsgOpenTechLevelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgOpenTechLevelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgOpenTechLevelReq::CopyFrom(const MsgOpenTechLevelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgOpenTechLevelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgOpenTechLevelReq::Swap(MsgOpenTechLevelReq* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgOpenTechLevelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgOpenTechLevelReq_descriptor_;
  metadata.reflection = MsgOpenTechLevelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgApplyAddTechInfoReq::kLevelFieldNumber;
const int MsgApplyAddTechInfoReq::kIdFieldNumber;
const int MsgApplyAddTechInfoReq::kAddcountFieldNumber;
#endif  // !_MSC_VER

MsgApplyAddTechInfoReq::MsgApplyAddTechInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgApplyAddTechInfoReq::InitAsDefaultInstance() {
}

MsgApplyAddTechInfoReq::MsgApplyAddTechInfoReq(const MsgApplyAddTechInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgApplyAddTechInfoReq::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  id_ = 0;
  addcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgApplyAddTechInfoReq::~MsgApplyAddTechInfoReq() {
  SharedDtor();
}

void MsgApplyAddTechInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgApplyAddTechInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgApplyAddTechInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgApplyAddTechInfoReq_descriptor_;
}

const MsgApplyAddTechInfoReq& MsgApplyAddTechInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTechnologyC2S_2eproto();  return *default_instance_;
}

MsgApplyAddTechInfoReq* MsgApplyAddTechInfoReq::default_instance_ = NULL;

MsgApplyAddTechInfoReq* MsgApplyAddTechInfoReq::New() const {
  return new MsgApplyAddTechInfoReq;
}

void MsgApplyAddTechInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    id_ = 0;
    addcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgApplyAddTechInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addcount;
        break;
      }
      
      // required int32 addcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addcount_)));
          set_has_addcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgApplyAddTechInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // required int32 addcount = 3;
  if (has_addcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgApplyAddTechInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // required int32 addcount = 3;
  if (has_addcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->addcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgApplyAddTechInfoReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 addcount = 3;
    if (has_addcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgApplyAddTechInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgApplyAddTechInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgApplyAddTechInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgApplyAddTechInfoReq::MergeFrom(const MsgApplyAddTechInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_addcount()) {
      set_addcount(from.addcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgApplyAddTechInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgApplyAddTechInfoReq::CopyFrom(const MsgApplyAddTechInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgApplyAddTechInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgApplyAddTechInfoReq::Swap(MsgApplyAddTechInfoReq* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(id_, other->id_);
    std::swap(addcount_, other->addcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgApplyAddTechInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgApplyAddTechInfoReq_descriptor_;
  metadata.reflection = MsgApplyAddTechInfoReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
