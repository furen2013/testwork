// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageFarmC2S.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgFarmStateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFarmStateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSeedCellReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSeedCellReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSpreadManureReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSpreadManureReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGatherPloughCellReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGatherPloughCellReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgWaterCellReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgWaterCellReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBuildMillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBuildMillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBuildWaterWayReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBuildWaterWayReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageFarmC2S_2eproto() {
  protobuf_AddDesc_MessageFarmC2S_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageFarmC2S.proto");
  GOOGLE_CHECK(file != NULL);
  MsgFarmStateReq_descriptor_ = file->message_type(0);
  static const int MsgFarmStateReq_offsets_[1] = {
  };
  MsgFarmStateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFarmStateReq_descriptor_,
      MsgFarmStateReq::default_instance_,
      MsgFarmStateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFarmStateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFarmStateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFarmStateReq));
  MsgSeedCellReq_descriptor_ = file->message_type(1);
  static const int MsgSeedCellReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSeedCellReq, seedlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSeedCellReq, cellid_),
  };
  MsgSeedCellReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSeedCellReq_descriptor_,
      MsgSeedCellReq::default_instance_,
      MsgSeedCellReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSeedCellReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSeedCellReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSeedCellReq));
  MsgSpreadManureReq_descriptor_ = file->message_type(2);
  static const int MsgSpreadManureReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSpreadManureReq, manurelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSpreadManureReq, cellid_),
  };
  MsgSpreadManureReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSpreadManureReq_descriptor_,
      MsgSpreadManureReq::default_instance_,
      MsgSpreadManureReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSpreadManureReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSpreadManureReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSpreadManureReq));
  MsgGatherPloughCellReq_descriptor_ = file->message_type(3);
  static const int MsgGatherPloughCellReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatherPloughCellReq, cellid_),
  };
  MsgGatherPloughCellReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGatherPloughCellReq_descriptor_,
      MsgGatherPloughCellReq::default_instance_,
      MsgGatherPloughCellReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatherPloughCellReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGatherPloughCellReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGatherPloughCellReq));
  MsgWaterCellReq_descriptor_ = file->message_type(4);
  static const int MsgWaterCellReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWaterCellReq, cellid_),
  };
  MsgWaterCellReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgWaterCellReq_descriptor_,
      MsgWaterCellReq::default_instance_,
      MsgWaterCellReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWaterCellReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWaterCellReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgWaterCellReq));
  MsgBuildMillReq_descriptor_ = file->message_type(5);
  static const int MsgBuildMillReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildMillReq, milllevel_),
  };
  MsgBuildMillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBuildMillReq_descriptor_,
      MsgBuildMillReq::default_instance_,
      MsgBuildMillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildMillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildMillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBuildMillReq));
  MsgBuildWaterWayReq_descriptor_ = file->message_type(6);
  static const int MsgBuildWaterWayReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildWaterWayReq, waterwaylevel_),
  };
  MsgBuildWaterWayReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBuildWaterWayReq_descriptor_,
      MsgBuildWaterWayReq::default_instance_,
      MsgBuildWaterWayReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildWaterWayReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuildWaterWayReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBuildWaterWayReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageFarmC2S_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFarmStateReq_descriptor_, &MsgFarmStateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSeedCellReq_descriptor_, &MsgSeedCellReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSpreadManureReq_descriptor_, &MsgSpreadManureReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGatherPloughCellReq_descriptor_, &MsgGatherPloughCellReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgWaterCellReq_descriptor_, &MsgWaterCellReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBuildMillReq_descriptor_, &MsgBuildMillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBuildWaterWayReq_descriptor_, &MsgBuildWaterWayReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageFarmC2S_2eproto() {
  delete MsgFarmStateReq::default_instance_;
  delete MsgFarmStateReq_reflection_;
  delete MsgSeedCellReq::default_instance_;
  delete MsgSeedCellReq_reflection_;
  delete MsgSpreadManureReq::default_instance_;
  delete MsgSpreadManureReq_reflection_;
  delete MsgGatherPloughCellReq::default_instance_;
  delete MsgGatherPloughCellReq_reflection_;
  delete MsgWaterCellReq::default_instance_;
  delete MsgWaterCellReq_reflection_;
  delete MsgBuildMillReq::default_instance_;
  delete MsgBuildMillReq_reflection_;
  delete MsgBuildWaterWayReq::default_instance_;
  delete MsgBuildWaterWayReq_reflection_;
}

void protobuf_AddDesc_MessageFarmC2S_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_MsgHead_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024MessageFarmC2S.proto\032\rMsgHead.proto\"\021\n"
    "\017MsgFarmStateReq\"3\n\016MsgSeedCellReq\022\021\n\tse"
    "edlevel\030\001 \002(\005\022\016\n\006cellid\030\002 \002(\005\"9\n\022MsgSpre"
    "adManureReq\022\023\n\013manurelevel\030\001 \002(\005\022\016\n\006cell"
    "id\030\002 \002(\005\"(\n\026MsgGatherPloughCellReq\022\016\n\006ce"
    "llid\030\001 \002(\005\"!\n\017MsgWaterCellReq\022\016\n\006cellid\030"
    "\001 \002(\005\"$\n\017MsgBuildMillReq\022\021\n\tmilllevel\030\001 "
    "\002(\005\",\n\023MsgBuildWaterWayReq\022\025\n\rwaterwayle"
    "vel\030\001 \002(\005", 329);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageFarmC2S.proto", &protobuf_RegisterTypes);
  MsgFarmStateReq::default_instance_ = new MsgFarmStateReq();
  MsgSeedCellReq::default_instance_ = new MsgSeedCellReq();
  MsgSpreadManureReq::default_instance_ = new MsgSpreadManureReq();
  MsgGatherPloughCellReq::default_instance_ = new MsgGatherPloughCellReq();
  MsgWaterCellReq::default_instance_ = new MsgWaterCellReq();
  MsgBuildMillReq::default_instance_ = new MsgBuildMillReq();
  MsgBuildWaterWayReq::default_instance_ = new MsgBuildWaterWayReq();
  MsgFarmStateReq::default_instance_->InitAsDefaultInstance();
  MsgSeedCellReq::default_instance_->InitAsDefaultInstance();
  MsgSpreadManureReq::default_instance_->InitAsDefaultInstance();
  MsgGatherPloughCellReq::default_instance_->InitAsDefaultInstance();
  MsgWaterCellReq::default_instance_->InitAsDefaultInstance();
  MsgBuildMillReq::default_instance_->InitAsDefaultInstance();
  MsgBuildWaterWayReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageFarmC2S_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageFarmC2S_2eproto {
  StaticDescriptorInitializer_MessageFarmC2S_2eproto() {
    protobuf_AddDesc_MessageFarmC2S_2eproto();
  }
} static_descriptor_initializer_MessageFarmC2S_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgFarmStateReq::MsgFarmStateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgFarmStateReq::InitAsDefaultInstance() {
}

MsgFarmStateReq::MsgFarmStateReq(const MsgFarmStateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgFarmStateReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFarmStateReq::~MsgFarmStateReq() {
  SharedDtor();
}

void MsgFarmStateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgFarmStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFarmStateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFarmStateReq_descriptor_;
}

const MsgFarmStateReq& MsgFarmStateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFarmC2S_2eproto();  return *default_instance_;
}

MsgFarmStateReq* MsgFarmStateReq::default_instance_ = NULL;

MsgFarmStateReq* MsgFarmStateReq::New() const {
  return new MsgFarmStateReq;
}

void MsgFarmStateReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFarmStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgFarmStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFarmStateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFarmStateReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFarmStateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFarmStateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFarmStateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFarmStateReq::MergeFrom(const MsgFarmStateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFarmStateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFarmStateReq::CopyFrom(const MsgFarmStateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFarmStateReq::IsInitialized() const {
  
  return true;
}

void MsgFarmStateReq::Swap(MsgFarmStateReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFarmStateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFarmStateReq_descriptor_;
  metadata.reflection = MsgFarmStateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSeedCellReq::kSeedlevelFieldNumber;
const int MsgSeedCellReq::kCellidFieldNumber;
#endif  // !_MSC_VER

MsgSeedCellReq::MsgSeedCellReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSeedCellReq::InitAsDefaultInstance() {
}

MsgSeedCellReq::MsgSeedCellReq(const MsgSeedCellReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSeedCellReq::SharedCtor() {
  _cached_size_ = 0;
  seedlevel_ = 0;
  cellid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSeedCellReq::~MsgSeedCellReq() {
  SharedDtor();
}

void MsgSeedCellReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSeedCellReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSeedCellReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSeedCellReq_descriptor_;
}

const MsgSeedCellReq& MsgSeedCellReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFarmC2S_2eproto();  return *default_instance_;
}

MsgSeedCellReq* MsgSeedCellReq::default_instance_ = NULL;

MsgSeedCellReq* MsgSeedCellReq::New() const {
  return new MsgSeedCellReq;
}

void MsgSeedCellReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seedlevel_ = 0;
    cellid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSeedCellReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seedlevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seedlevel_)));
          set_has_seedlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cellid;
        break;
      }
      
      // required int32 cellid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSeedCellReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seedlevel = 1;
  if (has_seedlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seedlevel(), output);
  }
  
  // required int32 cellid = 2;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSeedCellReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seedlevel = 1;
  if (has_seedlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seedlevel(), target);
  }
  
  // required int32 cellid = 2;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSeedCellReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seedlevel = 1;
    if (has_seedlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seedlevel());
    }
    
    // required int32 cellid = 2;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSeedCellReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSeedCellReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSeedCellReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSeedCellReq::MergeFrom(const MsgSeedCellReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seedlevel()) {
      set_seedlevel(from.seedlevel());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSeedCellReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSeedCellReq::CopyFrom(const MsgSeedCellReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSeedCellReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgSeedCellReq::Swap(MsgSeedCellReq* other) {
  if (other != this) {
    std::swap(seedlevel_, other->seedlevel_);
    std::swap(cellid_, other->cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSeedCellReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSeedCellReq_descriptor_;
  metadata.reflection = MsgSeedCellReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSpreadManureReq::kManurelevelFieldNumber;
const int MsgSpreadManureReq::kCellidFieldNumber;
#endif  // !_MSC_VER

MsgSpreadManureReq::MsgSpreadManureReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSpreadManureReq::InitAsDefaultInstance() {
}

MsgSpreadManureReq::MsgSpreadManureReq(const MsgSpreadManureReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSpreadManureReq::SharedCtor() {
  _cached_size_ = 0;
  manurelevel_ = 0;
  cellid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSpreadManureReq::~MsgSpreadManureReq() {
  SharedDtor();
}

void MsgSpreadManureReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSpreadManureReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSpreadManureReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSpreadManureReq_descriptor_;
}

const MsgSpreadManureReq& MsgSpreadManureReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFarmC2S_2eproto();  return *default_instance_;
}

MsgSpreadManureReq* MsgSpreadManureReq::default_instance_ = NULL;

MsgSpreadManureReq* MsgSpreadManureReq::New() const {
  return new MsgSpreadManureReq;
}

void MsgSpreadManureReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manurelevel_ = 0;
    cellid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSpreadManureReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 manurelevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manurelevel_)));
          set_has_manurelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cellid;
        break;
      }
      
      // required int32 cellid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSpreadManureReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 manurelevel = 1;
  if (has_manurelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->manurelevel(), output);
  }
  
  // required int32 cellid = 2;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSpreadManureReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 manurelevel = 1;
  if (has_manurelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->manurelevel(), target);
  }
  
  // required int32 cellid = 2;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSpreadManureReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 manurelevel = 1;
    if (has_manurelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manurelevel());
    }
    
    // required int32 cellid = 2;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSpreadManureReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSpreadManureReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSpreadManureReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSpreadManureReq::MergeFrom(const MsgSpreadManureReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manurelevel()) {
      set_manurelevel(from.manurelevel());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSpreadManureReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSpreadManureReq::CopyFrom(const MsgSpreadManureReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSpreadManureReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgSpreadManureReq::Swap(MsgSpreadManureReq* other) {
  if (other != this) {
    std::swap(manurelevel_, other->manurelevel_);
    std::swap(cellid_, other->cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSpreadManureReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSpreadManureReq_descriptor_;
  metadata.reflection = MsgSpreadManureReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGatherPloughCellReq::kCellidFieldNumber;
#endif  // !_MSC_VER

MsgGatherPloughCellReq::MsgGatherPloughCellReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGatherPloughCellReq::InitAsDefaultInstance() {
}

MsgGatherPloughCellReq::MsgGatherPloughCellReq(const MsgGatherPloughCellReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGatherPloughCellReq::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGatherPloughCellReq::~MsgGatherPloughCellReq() {
  SharedDtor();
}

void MsgGatherPloughCellReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGatherPloughCellReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGatherPloughCellReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGatherPloughCellReq_descriptor_;
}

const MsgGatherPloughCellReq& MsgGatherPloughCellReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFarmC2S_2eproto();  return *default_instance_;
}

MsgGatherPloughCellReq* MsgGatherPloughCellReq::default_instance_ = NULL;

MsgGatherPloughCellReq* MsgGatherPloughCellReq::New() const {
  return new MsgGatherPloughCellReq;
}

void MsgGatherPloughCellReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGatherPloughCellReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cellid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGatherPloughCellReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cellid = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cellid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGatherPloughCellReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cellid = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cellid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGatherPloughCellReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cellid = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGatherPloughCellReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGatherPloughCellReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGatherPloughCellReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGatherPloughCellReq::MergeFrom(const MsgGatherPloughCellReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGatherPloughCellReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGatherPloughCellReq::CopyFrom(const MsgGatherPloughCellReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGatherPloughCellReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgGatherPloughCellReq::Swap(MsgGatherPloughCellReq* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGatherPloughCellReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGatherPloughCellReq_descriptor_;
  metadata.reflection = MsgGatherPloughCellReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgWaterCellReq::kCellidFieldNumber;
#endif  // !_MSC_VER

MsgWaterCellReq::MsgWaterCellReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgWaterCellReq::InitAsDefaultInstance() {
}

MsgWaterCellReq::MsgWaterCellReq(const MsgWaterCellReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgWaterCellReq::SharedCtor() {
  _cached_size_ = 0;
  cellid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgWaterCellReq::~MsgWaterCellReq() {
  SharedDtor();
}

void MsgWaterCellReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgWaterCellReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgWaterCellReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgWaterCellReq_descriptor_;
}

const MsgWaterCellReq& MsgWaterCellReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFarmC2S_2eproto();  return *default_instance_;
}

MsgWaterCellReq* MsgWaterCellReq::default_instance_ = NULL;

MsgWaterCellReq* MsgWaterCellReq::New() const {
  return new MsgWaterCellReq;
}

void MsgWaterCellReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgWaterCellReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cellid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgWaterCellReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cellid = 1;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cellid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgWaterCellReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cellid = 1;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cellid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgWaterCellReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cellid = 1;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgWaterCellReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgWaterCellReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgWaterCellReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgWaterCellReq::MergeFrom(const MsgWaterCellReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgWaterCellReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgWaterCellReq::CopyFrom(const MsgWaterCellReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWaterCellReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgWaterCellReq::Swap(MsgWaterCellReq* other) {
  if (other != this) {
    std::swap(cellid_, other->cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgWaterCellReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgWaterCellReq_descriptor_;
  metadata.reflection = MsgWaterCellReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBuildMillReq::kMilllevelFieldNumber;
#endif  // !_MSC_VER

MsgBuildMillReq::MsgBuildMillReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgBuildMillReq::InitAsDefaultInstance() {
}

MsgBuildMillReq::MsgBuildMillReq(const MsgBuildMillReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgBuildMillReq::SharedCtor() {
  _cached_size_ = 0;
  milllevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBuildMillReq::~MsgBuildMillReq() {
  SharedDtor();
}

void MsgBuildMillReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBuildMillReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBuildMillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBuildMillReq_descriptor_;
}

const MsgBuildMillReq& MsgBuildMillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFarmC2S_2eproto();  return *default_instance_;
}

MsgBuildMillReq* MsgBuildMillReq::default_instance_ = NULL;

MsgBuildMillReq* MsgBuildMillReq::New() const {
  return new MsgBuildMillReq;
}

void MsgBuildMillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    milllevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBuildMillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 milllevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &milllevel_)));
          set_has_milllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBuildMillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 milllevel = 1;
  if (has_milllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->milllevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBuildMillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 milllevel = 1;
  if (has_milllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->milllevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBuildMillReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 milllevel = 1;
    if (has_milllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->milllevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBuildMillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBuildMillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBuildMillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBuildMillReq::MergeFrom(const MsgBuildMillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_milllevel()) {
      set_milllevel(from.milllevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBuildMillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBuildMillReq::CopyFrom(const MsgBuildMillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBuildMillReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgBuildMillReq::Swap(MsgBuildMillReq* other) {
  if (other != this) {
    std::swap(milllevel_, other->milllevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBuildMillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBuildMillReq_descriptor_;
  metadata.reflection = MsgBuildMillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBuildWaterWayReq::kWaterwaylevelFieldNumber;
#endif  // !_MSC_VER

MsgBuildWaterWayReq::MsgBuildWaterWayReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgBuildWaterWayReq::InitAsDefaultInstance() {
}

MsgBuildWaterWayReq::MsgBuildWaterWayReq(const MsgBuildWaterWayReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgBuildWaterWayReq::SharedCtor() {
  _cached_size_ = 0;
  waterwaylevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBuildWaterWayReq::~MsgBuildWaterWayReq() {
  SharedDtor();
}

void MsgBuildWaterWayReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBuildWaterWayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBuildWaterWayReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBuildWaterWayReq_descriptor_;
}

const MsgBuildWaterWayReq& MsgBuildWaterWayReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageFarmC2S_2eproto();  return *default_instance_;
}

MsgBuildWaterWayReq* MsgBuildWaterWayReq::default_instance_ = NULL;

MsgBuildWaterWayReq* MsgBuildWaterWayReq::New() const {
  return new MsgBuildWaterWayReq;
}

void MsgBuildWaterWayReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    waterwaylevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBuildWaterWayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 waterwaylevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waterwaylevel_)));
          set_has_waterwaylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBuildWaterWayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 waterwaylevel = 1;
  if (has_waterwaylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->waterwaylevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBuildWaterWayReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 waterwaylevel = 1;
  if (has_waterwaylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->waterwaylevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBuildWaterWayReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 waterwaylevel = 1;
    if (has_waterwaylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waterwaylevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBuildWaterWayReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBuildWaterWayReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBuildWaterWayReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBuildWaterWayReq::MergeFrom(const MsgBuildWaterWayReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_waterwaylevel()) {
      set_waterwaylevel(from.waterwaylevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBuildWaterWayReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBuildWaterWayReq::CopyFrom(const MsgBuildWaterWayReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBuildWaterWayReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgBuildWaterWayReq::Swap(MsgBuildWaterWayReq* other) {
  if (other != this) {
    std::swap(waterwaylevel_, other->waterwaylevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBuildWaterWayReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBuildWaterWayReq_descriptor_;
  metadata.reflection = MsgBuildWaterWayReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
