// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageC2S.proto

#ifndef PROTOBUF_MessageC2S_2eproto__INCLUDED
#define PROTOBUF_MessageC2S_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "MsgHead.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageC2S_2eproto();
void protobuf_AssignDesc_MessageC2S_2eproto();
void protobuf_ShutdownFile_MessageC2S_2eproto();

class MsgC2SLoginReq;
class MsgC2SCreateAcountReq;
class MsgC2SLoginMacReq;
class MsgBindMailReq;
class MsgUnbindMacReq;
class MsgBindMacReq;
class MsgMailLoginReq;

// ===================================================================

class MsgC2SLoginReq : public ::google::protobuf::Message {
 public:
  MsgC2SLoginReq();
  virtual ~MsgC2SLoginReq();
  
  MsgC2SLoginReq(const MsgC2SLoginReq& from);
  
  inline MsgC2SLoginReq& operator=(const MsgC2SLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgC2SLoginReq& default_instance();
  
  void Swap(MsgC2SLoginReq* other);
  
  // implements Message ----------------------------------------------
  
  MsgC2SLoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgC2SLoginReq& from);
  void MergeFrom(const MsgC2SLoginReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // @@protoc_insertion_point(class_scope:MsgC2SLoginReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_password();
  inline void clear_has_password();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* password_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MessageC2S_2eproto();
  friend void protobuf_AssignDesc_MessageC2S_2eproto();
  friend void protobuf_ShutdownFile_MessageC2S_2eproto();
  
  void InitAsDefaultInstance();
  static MsgC2SLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgC2SCreateAcountReq : public ::google::protobuf::Message {
 public:
  MsgC2SCreateAcountReq();
  virtual ~MsgC2SCreateAcountReq();
  
  MsgC2SCreateAcountReq(const MsgC2SCreateAcountReq& from);
  
  inline MsgC2SCreateAcountReq& operator=(const MsgC2SCreateAcountReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgC2SCreateAcountReq& default_instance();
  
  void Swap(MsgC2SCreateAcountReq* other);
  
  // implements Message ----------------------------------------------
  
  MsgC2SCreateAcountReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgC2SCreateAcountReq& from);
  void MergeFrom(const MsgC2SCreateAcountReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // @@protoc_insertion_point(class_scope:MsgC2SCreateAcountReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_password();
  inline void clear_has_password();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* password_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_MessageC2S_2eproto();
  friend void protobuf_AssignDesc_MessageC2S_2eproto();
  friend void protobuf_ShutdownFile_MessageC2S_2eproto();
  
  void InitAsDefaultInstance();
  static MsgC2SCreateAcountReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgC2SLoginMacReq : public ::google::protobuf::Message {
 public:
  MsgC2SLoginMacReq();
  virtual ~MsgC2SLoginMacReq();
  
  MsgC2SLoginMacReq(const MsgC2SLoginMacReq& from);
  
  inline MsgC2SLoginMacReq& operator=(const MsgC2SLoginMacReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgC2SLoginMacReq& default_instance();
  
  void Swap(MsgC2SLoginMacReq* other);
  
  // implements Message ----------------------------------------------
  
  MsgC2SLoginMacReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgC2SLoginMacReq& from);
  void MergeFrom(const MsgC2SLoginMacReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string Mac = 1;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 1;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  
  // @@protoc_insertion_point(class_scope:MsgC2SLoginMacReq)
 private:
  inline void set_has_mac();
  inline void clear_has_mac();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* mac_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_MessageC2S_2eproto();
  friend void protobuf_AssignDesc_MessageC2S_2eproto();
  friend void protobuf_ShutdownFile_MessageC2S_2eproto();
  
  void InitAsDefaultInstance();
  static MsgC2SLoginMacReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgBindMailReq : public ::google::protobuf::Message {
 public:
  MsgBindMailReq();
  virtual ~MsgBindMailReq();
  
  MsgBindMailReq(const MsgBindMailReq& from);
  
  inline MsgBindMailReq& operator=(const MsgBindMailReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBindMailReq& default_instance();
  
  void Swap(MsgBindMailReq* other);
  
  // implements Message ----------------------------------------------
  
  MsgBindMailReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBindMailReq& from);
  void MergeFrom(const MsgBindMailReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline ::google::protobuf::uint64 account() const;
  inline void set_account(::google::protobuf::uint64 value);
  
  // required string mac = 2;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 2;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  
  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // required string mail = 4;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 4;
  inline const ::std::string& mail() const;
  inline void set_mail(const ::std::string& value);
  inline void set_mail(const char* value);
  inline void set_mail(const char* value, size_t size);
  inline ::std::string* mutable_mail();
  inline ::std::string* release_mail();
  
  // @@protoc_insertion_point(class_scope:MsgBindMailReq)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_mail();
  inline void clear_has_mail();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 account_;
  ::std::string* mac_;
  ::std::string* password_;
  ::std::string* mail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_MessageC2S_2eproto();
  friend void protobuf_AssignDesc_MessageC2S_2eproto();
  friend void protobuf_ShutdownFile_MessageC2S_2eproto();
  
  void InitAsDefaultInstance();
  static MsgBindMailReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgUnbindMacReq : public ::google::protobuf::Message {
 public:
  MsgUnbindMacReq();
  virtual ~MsgUnbindMacReq();
  
  MsgUnbindMacReq(const MsgUnbindMacReq& from);
  
  inline MsgUnbindMacReq& operator=(const MsgUnbindMacReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgUnbindMacReq& default_instance();
  
  void Swap(MsgUnbindMacReq* other);
  
  // implements Message ----------------------------------------------
  
  MsgUnbindMacReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgUnbindMacReq& from);
  void MergeFrom(const MsgUnbindMacReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline ::google::protobuf::uint64 account() const;
  inline void set_account(::google::protobuf::uint64 value);
  
  // required string mac = 2;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 2;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  
  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // required string mail = 4;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 4;
  inline const ::std::string& mail() const;
  inline void set_mail(const ::std::string& value);
  inline void set_mail(const char* value);
  inline void set_mail(const char* value, size_t size);
  inline ::std::string* mutable_mail();
  inline ::std::string* release_mail();
  
  // @@protoc_insertion_point(class_scope:MsgUnbindMacReq)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_mail();
  inline void clear_has_mail();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 account_;
  ::std::string* mac_;
  ::std::string* password_;
  ::std::string* mail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_MessageC2S_2eproto();
  friend void protobuf_AssignDesc_MessageC2S_2eproto();
  friend void protobuf_ShutdownFile_MessageC2S_2eproto();
  
  void InitAsDefaultInstance();
  static MsgUnbindMacReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgBindMacReq : public ::google::protobuf::Message {
 public:
  MsgBindMacReq();
  virtual ~MsgBindMacReq();
  
  MsgBindMacReq(const MsgBindMacReq& from);
  
  inline MsgBindMacReq& operator=(const MsgBindMacReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBindMacReq& default_instance();
  
  void Swap(MsgBindMacReq* other);
  
  // implements Message ----------------------------------------------
  
  MsgBindMacReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBindMacReq& from);
  void MergeFrom(const MsgBindMacReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline ::google::protobuf::uint64 account() const;
  inline void set_account(::google::protobuf::uint64 value);
  
  // required string mac = 2;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 2;
  inline const ::std::string& mac() const;
  inline void set_mac(const ::std::string& value);
  inline void set_mac(const char* value);
  inline void set_mac(const char* value, size_t size);
  inline ::std::string* mutable_mac();
  inline ::std::string* release_mac();
  
  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // required string mail = 4;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 4;
  inline const ::std::string& mail() const;
  inline void set_mail(const ::std::string& value);
  inline void set_mail(const char* value);
  inline void set_mail(const char* value, size_t size);
  inline ::std::string* mutable_mail();
  inline ::std::string* release_mail();
  
  // @@protoc_insertion_point(class_scope:MsgBindMacReq)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_mail();
  inline void clear_has_mail();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 account_;
  ::std::string* mac_;
  ::std::string* password_;
  ::std::string* mail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_MessageC2S_2eproto();
  friend void protobuf_AssignDesc_MessageC2S_2eproto();
  friend void protobuf_ShutdownFile_MessageC2S_2eproto();
  
  void InitAsDefaultInstance();
  static MsgBindMacReq* default_instance_;
};
// -------------------------------------------------------------------

class MsgMailLoginReq : public ::google::protobuf::Message {
 public:
  MsgMailLoginReq();
  virtual ~MsgMailLoginReq();
  
  MsgMailLoginReq(const MsgMailLoginReq& from);
  
  inline MsgMailLoginReq& operator=(const MsgMailLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgMailLoginReq& default_instance();
  
  void Swap(MsgMailLoginReq* other);
  
  // implements Message ----------------------------------------------
  
  MsgMailLoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgMailLoginReq& from);
  void MergeFrom(const MsgMailLoginReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string password = 1;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 1;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // required string mail = 2;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 2;
  inline const ::std::string& mail() const;
  inline void set_mail(const ::std::string& value);
  inline void set_mail(const char* value);
  inline void set_mail(const char* value, size_t size);
  inline ::std::string* mutable_mail();
  inline ::std::string* release_mail();
  
  // @@protoc_insertion_point(class_scope:MsgMailLoginReq)
 private:
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_mail();
  inline void clear_has_mail();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* password_;
  ::std::string* mail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_MessageC2S_2eproto();
  friend void protobuf_AssignDesc_MessageC2S_2eproto();
  friend void protobuf_ShutdownFile_MessageC2S_2eproto();
  
  void InitAsDefaultInstance();
  static MsgMailLoginReq* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgC2SLoginReq

// required string id = 1;
inline bool MsgC2SLoginReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgC2SLoginReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgC2SLoginReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgC2SLoginReq::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MsgC2SLoginReq::id() const {
  return *id_;
}
inline void MsgC2SLoginReq::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MsgC2SLoginReq::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MsgC2SLoginReq::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgC2SLoginReq::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MsgC2SLoginReq::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 2;
inline bool MsgC2SLoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgC2SLoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgC2SLoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgC2SLoginReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& MsgC2SLoginReq::password() const {
  return *password_;
}
inline void MsgC2SLoginReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MsgC2SLoginReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MsgC2SLoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgC2SLoginReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* MsgC2SLoginReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgC2SCreateAcountReq

// required string id = 1;
inline bool MsgC2SCreateAcountReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgC2SCreateAcountReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgC2SCreateAcountReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgC2SCreateAcountReq::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MsgC2SCreateAcountReq::id() const {
  return *id_;
}
inline void MsgC2SCreateAcountReq::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MsgC2SCreateAcountReq::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MsgC2SCreateAcountReq::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgC2SCreateAcountReq::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MsgC2SCreateAcountReq::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string name = 2;
inline bool MsgC2SCreateAcountReq::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgC2SCreateAcountReq::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgC2SCreateAcountReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgC2SCreateAcountReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgC2SCreateAcountReq::name() const {
  return *name_;
}
inline void MsgC2SCreateAcountReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgC2SCreateAcountReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgC2SCreateAcountReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgC2SCreateAcountReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MsgC2SCreateAcountReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 3;
inline bool MsgC2SCreateAcountReq::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgC2SCreateAcountReq::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgC2SCreateAcountReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgC2SCreateAcountReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& MsgC2SCreateAcountReq::password() const {
  return *password_;
}
inline void MsgC2SCreateAcountReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MsgC2SCreateAcountReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MsgC2SCreateAcountReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgC2SCreateAcountReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* MsgC2SCreateAcountReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgC2SLoginMacReq

// required string Mac = 1;
inline bool MsgC2SLoginMacReq::has_mac() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgC2SLoginMacReq::set_has_mac() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgC2SLoginMacReq::clear_has_mac() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgC2SLoginMacReq::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& MsgC2SLoginMacReq::mac() const {
  return *mac_;
}
inline void MsgC2SLoginMacReq::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void MsgC2SLoginMacReq::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void MsgC2SLoginMacReq::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgC2SLoginMacReq::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* MsgC2SLoginMacReq::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgBindMailReq

// required uint64 account = 1;
inline bool MsgBindMailReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgBindMailReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgBindMailReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgBindMailReq::clear_account() {
  account_ = GOOGLE_ULONGLONG(0);
  clear_has_account();
}
inline ::google::protobuf::uint64 MsgBindMailReq::account() const {
  return account_;
}
inline void MsgBindMailReq::set_account(::google::protobuf::uint64 value) {
  set_has_account();
  account_ = value;
}

// required string mac = 2;
inline bool MsgBindMailReq::has_mac() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgBindMailReq::set_has_mac() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgBindMailReq::clear_has_mac() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgBindMailReq::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& MsgBindMailReq::mac() const {
  return *mac_;
}
inline void MsgBindMailReq::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void MsgBindMailReq::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void MsgBindMailReq::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBindMailReq::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* MsgBindMailReq::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 3;
inline bool MsgBindMailReq::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgBindMailReq::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgBindMailReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgBindMailReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& MsgBindMailReq::password() const {
  return *password_;
}
inline void MsgBindMailReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MsgBindMailReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MsgBindMailReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBindMailReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* MsgBindMailReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string mail = 4;
inline bool MsgBindMailReq::has_mail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgBindMailReq::set_has_mail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgBindMailReq::clear_has_mail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgBindMailReq::clear_mail() {
  if (mail_ != &::google::protobuf::internal::kEmptyString) {
    mail_->clear();
  }
  clear_has_mail();
}
inline const ::std::string& MsgBindMailReq::mail() const {
  return *mail_;
}
inline void MsgBindMailReq::set_mail(const ::std::string& value) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  mail_->assign(value);
}
inline void MsgBindMailReq::set_mail(const char* value) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  mail_->assign(value);
}
inline void MsgBindMailReq::set_mail(const char* value, size_t size) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  mail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBindMailReq::mutable_mail() {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  return mail_;
}
inline ::std::string* MsgBindMailReq::release_mail() {
  clear_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mail_;
    mail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgUnbindMacReq

// required uint64 account = 1;
inline bool MsgUnbindMacReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgUnbindMacReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgUnbindMacReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgUnbindMacReq::clear_account() {
  account_ = GOOGLE_ULONGLONG(0);
  clear_has_account();
}
inline ::google::protobuf::uint64 MsgUnbindMacReq::account() const {
  return account_;
}
inline void MsgUnbindMacReq::set_account(::google::protobuf::uint64 value) {
  set_has_account();
  account_ = value;
}

// required string mac = 2;
inline bool MsgUnbindMacReq::has_mac() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgUnbindMacReq::set_has_mac() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgUnbindMacReq::clear_has_mac() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgUnbindMacReq::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& MsgUnbindMacReq::mac() const {
  return *mac_;
}
inline void MsgUnbindMacReq::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void MsgUnbindMacReq::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void MsgUnbindMacReq::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgUnbindMacReq::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* MsgUnbindMacReq::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 3;
inline bool MsgUnbindMacReq::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgUnbindMacReq::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgUnbindMacReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgUnbindMacReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& MsgUnbindMacReq::password() const {
  return *password_;
}
inline void MsgUnbindMacReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MsgUnbindMacReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MsgUnbindMacReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgUnbindMacReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* MsgUnbindMacReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string mail = 4;
inline bool MsgUnbindMacReq::has_mail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgUnbindMacReq::set_has_mail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgUnbindMacReq::clear_has_mail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgUnbindMacReq::clear_mail() {
  if (mail_ != &::google::protobuf::internal::kEmptyString) {
    mail_->clear();
  }
  clear_has_mail();
}
inline const ::std::string& MsgUnbindMacReq::mail() const {
  return *mail_;
}
inline void MsgUnbindMacReq::set_mail(const ::std::string& value) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  mail_->assign(value);
}
inline void MsgUnbindMacReq::set_mail(const char* value) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  mail_->assign(value);
}
inline void MsgUnbindMacReq::set_mail(const char* value, size_t size) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  mail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgUnbindMacReq::mutable_mail() {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  return mail_;
}
inline ::std::string* MsgUnbindMacReq::release_mail() {
  clear_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mail_;
    mail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgBindMacReq

// required uint64 account = 1;
inline bool MsgBindMacReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgBindMacReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgBindMacReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgBindMacReq::clear_account() {
  account_ = GOOGLE_ULONGLONG(0);
  clear_has_account();
}
inline ::google::protobuf::uint64 MsgBindMacReq::account() const {
  return account_;
}
inline void MsgBindMacReq::set_account(::google::protobuf::uint64 value) {
  set_has_account();
  account_ = value;
}

// required string mac = 2;
inline bool MsgBindMacReq::has_mac() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgBindMacReq::set_has_mac() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgBindMacReq::clear_has_mac() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgBindMacReq::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& MsgBindMacReq::mac() const {
  return *mac_;
}
inline void MsgBindMacReq::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void MsgBindMacReq::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void MsgBindMacReq::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBindMacReq::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* MsgBindMacReq::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 3;
inline bool MsgBindMacReq::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgBindMacReq::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgBindMacReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgBindMacReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& MsgBindMacReq::password() const {
  return *password_;
}
inline void MsgBindMacReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MsgBindMacReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MsgBindMacReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBindMacReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* MsgBindMacReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string mail = 4;
inline bool MsgBindMacReq::has_mail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgBindMacReq::set_has_mail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgBindMacReq::clear_has_mail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgBindMacReq::clear_mail() {
  if (mail_ != &::google::protobuf::internal::kEmptyString) {
    mail_->clear();
  }
  clear_has_mail();
}
inline const ::std::string& MsgBindMacReq::mail() const {
  return *mail_;
}
inline void MsgBindMacReq::set_mail(const ::std::string& value) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  mail_->assign(value);
}
inline void MsgBindMacReq::set_mail(const char* value) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  mail_->assign(value);
}
inline void MsgBindMacReq::set_mail(const char* value, size_t size) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  mail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBindMacReq::mutable_mail() {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  return mail_;
}
inline ::std::string* MsgBindMacReq::release_mail() {
  clear_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mail_;
    mail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgMailLoginReq

// required string password = 1;
inline bool MsgMailLoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgMailLoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgMailLoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgMailLoginReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& MsgMailLoginReq::password() const {
  return *password_;
}
inline void MsgMailLoginReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MsgMailLoginReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MsgMailLoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgMailLoginReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* MsgMailLoginReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string mail = 2;
inline bool MsgMailLoginReq::has_mail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgMailLoginReq::set_has_mail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgMailLoginReq::clear_has_mail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgMailLoginReq::clear_mail() {
  if (mail_ != &::google::protobuf::internal::kEmptyString) {
    mail_->clear();
  }
  clear_has_mail();
}
inline const ::std::string& MsgMailLoginReq::mail() const {
  return *mail_;
}
inline void MsgMailLoginReq::set_mail(const ::std::string& value) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  mail_->assign(value);
}
inline void MsgMailLoginReq::set_mail(const char* value) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  mail_->assign(value);
}
inline void MsgMailLoginReq::set_mail(const char* value, size_t size) {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  mail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgMailLoginReq::mutable_mail() {
  set_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    mail_ = new ::std::string;
  }
  return mail_;
}
inline ::std::string* MsgMailLoginReq::release_mail() {
  clear_has_mail();
  if (mail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mail_;
    mail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageC2S_2eproto__INCLUDED
