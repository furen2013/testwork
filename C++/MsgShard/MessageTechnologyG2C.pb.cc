// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageTechnologyG2C.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgTechInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTechInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTechLevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTechLevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTechnologyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTechnologyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTechnologyStateACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTechnologyStateACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgOpenTechLevelACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgOpenTechLevelACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgApplyAddTechInfoACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgApplyAddTechInfoACK_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enTechnologyResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageTechnologyG2C_2eproto() {
  protobuf_AddDesc_MessageTechnologyG2C_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageTechnologyG2C.proto");
  GOOGLE_CHECK(file != NULL);
  MsgTechInfo_descriptor_ = file->message_type(0);
  static const int MsgTechInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechInfo, currentcount_),
  };
  MsgTechInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTechInfo_descriptor_,
      MsgTechInfo::default_instance_,
      MsgTechInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTechInfo));
  MsgTechLevelInfo_descriptor_ = file->message_type(1);
  static const int MsgTechLevelInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechLevelInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechLevelInfo, techs_),
  };
  MsgTechLevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTechLevelInfo_descriptor_,
      MsgTechLevelInfo::default_instance_,
      MsgTechLevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechLevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechLevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTechLevelInfo));
  MsgTechnologyInfo_descriptor_ = file->message_type(2);
  static const int MsgTechnologyInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechnologyInfo, levels_),
  };
  MsgTechnologyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTechnologyInfo_descriptor_,
      MsgTechnologyInfo::default_instance_,
      MsgTechnologyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechnologyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechnologyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTechnologyInfo));
  MsgTechnologyStateACK_descriptor_ = file->message_type(3);
  static const int MsgTechnologyStateACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechnologyStateACK, info_),
  };
  MsgTechnologyStateACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTechnologyStateACK_descriptor_,
      MsgTechnologyStateACK::default_instance_,
      MsgTechnologyStateACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechnologyStateACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTechnologyStateACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTechnologyStateACK));
  MsgOpenTechLevelACK_descriptor_ = file->message_type(4);
  static const int MsgOpenTechLevelACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOpenTechLevelACK, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOpenTechLevelACK, en_),
  };
  MsgOpenTechLevelACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgOpenTechLevelACK_descriptor_,
      MsgOpenTechLevelACK::default_instance_,
      MsgOpenTechLevelACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOpenTechLevelACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgOpenTechLevelACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgOpenTechLevelACK));
  MsgApplyAddTechInfoACK_descriptor_ = file->message_type(5);
  static const int MsgApplyAddTechInfoACK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyAddTechInfoACK, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyAddTechInfoACK, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyAddTechInfoACK, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyAddTechInfoACK, en_),
  };
  MsgApplyAddTechInfoACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgApplyAddTechInfoACK_descriptor_,
      MsgApplyAddTechInfoACK::default_instance_,
      MsgApplyAddTechInfoACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyAddTechInfoACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyAddTechInfoACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgApplyAddTechInfoACK));
  enTechnologyResult_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageTechnologyG2C_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTechInfo_descriptor_, &MsgTechInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTechLevelInfo_descriptor_, &MsgTechLevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTechnologyInfo_descriptor_, &MsgTechnologyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTechnologyStateACK_descriptor_, &MsgTechnologyStateACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgOpenTechLevelACK_descriptor_, &MsgOpenTechLevelACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgApplyAddTechInfoACK_descriptor_, &MsgApplyAddTechInfoACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageTechnologyG2C_2eproto() {
  delete MsgTechInfo::default_instance_;
  delete MsgTechInfo_reflection_;
  delete MsgTechLevelInfo::default_instance_;
  delete MsgTechLevelInfo_reflection_;
  delete MsgTechnologyInfo::default_instance_;
  delete MsgTechnologyInfo_reflection_;
  delete MsgTechnologyStateACK::default_instance_;
  delete MsgTechnologyStateACK_reflection_;
  delete MsgOpenTechLevelACK::default_instance_;
  delete MsgOpenTechLevelACK_reflection_;
  delete MsgApplyAddTechInfoACK::default_instance_;
  delete MsgApplyAddTechInfoACK_reflection_;
}

void protobuf_AddDesc_MessageTechnologyG2C_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_MsgHead_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032MessageTechnologyG2C.proto\032\rMsgHead.pr"
    "oto\"/\n\013MsgTechInfo\022\n\n\002id\030\001 \002(\005\022\024\n\014curren"
    "tCount\030\002 \002(\005\">\n\020MsgTechLevelInfo\022\r\n\005leve"
    "l\030\001 \002(\005\022\033\n\005techs\030\002 \003(\0132\014.MsgTechInfo\"6\n\021"
    "MsgTechnologyInfo\022!\n\006levels\030\001 \003(\0132\021.MsgT"
    "echLevelInfo\"9\n\025MsgTechnologyStateACK\022 \n"
    "\004info\030\001 \002(\0132\022.MsgTechnologyInfo\"E\n\023MsgOp"
    "enTechLevelACK\022\r\n\005level\030\001 \002(\005\022\037\n\002en\030\002 \002("
    "\0162\023.enTechnologyResult\"e\n\026MsgApplyAddTec"
    "hInfoACK\022\r\n\005level\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\022\017\n\007c"
    "urrent\030\003 \002(\005\022\037\n\002en\030\004 \002(\0162\023.enTechnologyR"
    "esult*\232\001\n\022enTechnologyResult\022\021\n\rTechnolo"
    "gy_OK\020\000\022\037\n\033Technology_ErrorNotFindLvel\020\001"
    "\022#\n\037Technology_ErrorNotFindTechInfo\020\002\022+\n"
    "\'Technology_ErrorNotEnoughMoneyOpenLevel"
    "\020\003", 602);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageTechnologyG2C.proto", &protobuf_RegisterTypes);
  MsgTechInfo::default_instance_ = new MsgTechInfo();
  MsgTechLevelInfo::default_instance_ = new MsgTechLevelInfo();
  MsgTechnologyInfo::default_instance_ = new MsgTechnologyInfo();
  MsgTechnologyStateACK::default_instance_ = new MsgTechnologyStateACK();
  MsgOpenTechLevelACK::default_instance_ = new MsgOpenTechLevelACK();
  MsgApplyAddTechInfoACK::default_instance_ = new MsgApplyAddTechInfoACK();
  MsgTechInfo::default_instance_->InitAsDefaultInstance();
  MsgTechLevelInfo::default_instance_->InitAsDefaultInstance();
  MsgTechnologyInfo::default_instance_->InitAsDefaultInstance();
  MsgTechnologyStateACK::default_instance_->InitAsDefaultInstance();
  MsgOpenTechLevelACK::default_instance_->InitAsDefaultInstance();
  MsgApplyAddTechInfoACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageTechnologyG2C_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageTechnologyG2C_2eproto {
  StaticDescriptorInitializer_MessageTechnologyG2C_2eproto() {
    protobuf_AddDesc_MessageTechnologyG2C_2eproto();
  }
} static_descriptor_initializer_MessageTechnologyG2C_2eproto_;

const ::google::protobuf::EnumDescriptor* enTechnologyResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enTechnologyResult_descriptor_;
}
bool enTechnologyResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTechInfo::kIdFieldNumber;
const int MsgTechInfo::kCurrentCountFieldNumber;
#endif  // !_MSC_VER

MsgTechInfo::MsgTechInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgTechInfo::InitAsDefaultInstance() {
}

MsgTechInfo::MsgTechInfo(const MsgTechInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgTechInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  currentcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTechInfo::~MsgTechInfo() {
  SharedDtor();
}

void MsgTechInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTechInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTechInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTechInfo_descriptor_;
}

const MsgTechInfo& MsgTechInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTechnologyG2C_2eproto();  return *default_instance_;
}

MsgTechInfo* MsgTechInfo::default_instance_ = NULL;

MsgTechInfo* MsgTechInfo::New() const {
  return new MsgTechInfo;
}

void MsgTechInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    currentcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTechInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currentCount;
        break;
      }
      
      // required int32 currentCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentcount_)));
          set_has_currentcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTechInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 currentCount = 2;
  if (has_currentcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTechInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 currentCount = 2;
  if (has_currentcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currentcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTechInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 currentCount = 2;
    if (has_currentcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTechInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTechInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTechInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTechInfo::MergeFrom(const MsgTechInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_currentcount()) {
      set_currentcount(from.currentcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTechInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTechInfo::CopyFrom(const MsgTechInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTechInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgTechInfo::Swap(MsgTechInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(currentcount_, other->currentcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTechInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTechInfo_descriptor_;
  metadata.reflection = MsgTechInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTechLevelInfo::kLevelFieldNumber;
const int MsgTechLevelInfo::kTechsFieldNumber;
#endif  // !_MSC_VER

MsgTechLevelInfo::MsgTechLevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgTechLevelInfo::InitAsDefaultInstance() {
}

MsgTechLevelInfo::MsgTechLevelInfo(const MsgTechLevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgTechLevelInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTechLevelInfo::~MsgTechLevelInfo() {
  SharedDtor();
}

void MsgTechLevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTechLevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTechLevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTechLevelInfo_descriptor_;
}

const MsgTechLevelInfo& MsgTechLevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTechnologyG2C_2eproto();  return *default_instance_;
}

MsgTechLevelInfo* MsgTechLevelInfo::default_instance_ = NULL;

MsgTechLevelInfo* MsgTechLevelInfo::New() const {
  return new MsgTechLevelInfo;
}

void MsgTechLevelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  techs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTechLevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_techs;
        break;
      }
      
      // repeated .MsgTechInfo techs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_techs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_techs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_techs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTechLevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // repeated .MsgTechInfo techs = 2;
  for (int i = 0; i < this->techs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->techs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTechLevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // repeated .MsgTechInfo techs = 2;
  for (int i = 0; i < this->techs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->techs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTechLevelInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  // repeated .MsgTechInfo techs = 2;
  total_size += 1 * this->techs_size();
  for (int i = 0; i < this->techs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->techs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTechLevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTechLevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTechLevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTechLevelInfo::MergeFrom(const MsgTechLevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  techs_.MergeFrom(from.techs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTechLevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTechLevelInfo::CopyFrom(const MsgTechLevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTechLevelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < techs_size(); i++) {
    if (!this->techs(i).IsInitialized()) return false;
  }
  return true;
}

void MsgTechLevelInfo::Swap(MsgTechLevelInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    techs_.Swap(&other->techs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTechLevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTechLevelInfo_descriptor_;
  metadata.reflection = MsgTechLevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTechnologyInfo::kLevelsFieldNumber;
#endif  // !_MSC_VER

MsgTechnologyInfo::MsgTechnologyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgTechnologyInfo::InitAsDefaultInstance() {
}

MsgTechnologyInfo::MsgTechnologyInfo(const MsgTechnologyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgTechnologyInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTechnologyInfo::~MsgTechnologyInfo() {
  SharedDtor();
}

void MsgTechnologyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTechnologyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTechnologyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTechnologyInfo_descriptor_;
}

const MsgTechnologyInfo& MsgTechnologyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTechnologyG2C_2eproto();  return *default_instance_;
}

MsgTechnologyInfo* MsgTechnologyInfo::default_instance_ = NULL;

MsgTechnologyInfo* MsgTechnologyInfo::New() const {
  return new MsgTechnologyInfo;
}

void MsgTechnologyInfo::Clear() {
  levels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTechnologyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgTechLevelInfo levels = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_levels;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTechnologyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MsgTechLevelInfo levels = 1;
  for (int i = 0; i < this->levels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->levels(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTechnologyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgTechLevelInfo levels = 1;
  for (int i = 0; i < this->levels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->levels(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTechnologyInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgTechLevelInfo levels = 1;
  total_size += 1 * this->levels_size();
  for (int i = 0; i < this->levels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levels(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTechnologyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTechnologyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTechnologyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTechnologyInfo::MergeFrom(const MsgTechnologyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  levels_.MergeFrom(from.levels_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTechnologyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTechnologyInfo::CopyFrom(const MsgTechnologyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTechnologyInfo::IsInitialized() const {
  
  for (int i = 0; i < levels_size(); i++) {
    if (!this->levels(i).IsInitialized()) return false;
  }
  return true;
}

void MsgTechnologyInfo::Swap(MsgTechnologyInfo* other) {
  if (other != this) {
    levels_.Swap(&other->levels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTechnologyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTechnologyInfo_descriptor_;
  metadata.reflection = MsgTechnologyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTechnologyStateACK::kInfoFieldNumber;
#endif  // !_MSC_VER

MsgTechnologyStateACK::MsgTechnologyStateACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgTechnologyStateACK::InitAsDefaultInstance() {
  info_ = const_cast< ::MsgTechnologyInfo*>(&::MsgTechnologyInfo::default_instance());
}

MsgTechnologyStateACK::MsgTechnologyStateACK(const MsgTechnologyStateACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgTechnologyStateACK::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTechnologyStateACK::~MsgTechnologyStateACK() {
  SharedDtor();
}

void MsgTechnologyStateACK::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MsgTechnologyStateACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTechnologyStateACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTechnologyStateACK_descriptor_;
}

const MsgTechnologyStateACK& MsgTechnologyStateACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTechnologyG2C_2eproto();  return *default_instance_;
}

MsgTechnologyStateACK* MsgTechnologyStateACK::default_instance_ = NULL;

MsgTechnologyStateACK* MsgTechnologyStateACK::New() const {
  return new MsgTechnologyStateACK;
}

void MsgTechnologyStateACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::MsgTechnologyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTechnologyStateACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgTechnologyInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTechnologyStateACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .MsgTechnologyInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTechnologyStateACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgTechnologyInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTechnologyStateACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgTechnologyInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTechnologyStateACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTechnologyStateACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTechnologyStateACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTechnologyStateACK::MergeFrom(const MsgTechnologyStateACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::MsgTechnologyInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTechnologyStateACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTechnologyStateACK::CopyFrom(const MsgTechnologyStateACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTechnologyStateACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void MsgTechnologyStateACK::Swap(MsgTechnologyStateACK* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTechnologyStateACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTechnologyStateACK_descriptor_;
  metadata.reflection = MsgTechnologyStateACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgOpenTechLevelACK::kLevelFieldNumber;
const int MsgOpenTechLevelACK::kEnFieldNumber;
#endif  // !_MSC_VER

MsgOpenTechLevelACK::MsgOpenTechLevelACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgOpenTechLevelACK::InitAsDefaultInstance() {
}

MsgOpenTechLevelACK::MsgOpenTechLevelACK(const MsgOpenTechLevelACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgOpenTechLevelACK::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  en_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgOpenTechLevelACK::~MsgOpenTechLevelACK() {
  SharedDtor();
}

void MsgOpenTechLevelACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgOpenTechLevelACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgOpenTechLevelACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgOpenTechLevelACK_descriptor_;
}

const MsgOpenTechLevelACK& MsgOpenTechLevelACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTechnologyG2C_2eproto();  return *default_instance_;
}

MsgOpenTechLevelACK* MsgOpenTechLevelACK::default_instance_ = NULL;

MsgOpenTechLevelACK* MsgOpenTechLevelACK::New() const {
  return new MsgOpenTechLevelACK;
}

void MsgOpenTechLevelACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    en_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgOpenTechLevelACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_en;
        break;
      }
      
      // required .enTechnologyResult en = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_en:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (enTechnologyResult_IsValid(value)) {
            set_en(static_cast< enTechnologyResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgOpenTechLevelACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required .enTechnologyResult en = 2;
  if (has_en()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->en(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgOpenTechLevelACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required .enTechnologyResult en = 2;
  if (has_en()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->en(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgOpenTechLevelACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required .enTechnologyResult en = 2;
    if (has_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->en());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgOpenTechLevelACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgOpenTechLevelACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgOpenTechLevelACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgOpenTechLevelACK::MergeFrom(const MsgOpenTechLevelACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_en()) {
      set_en(from.en());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgOpenTechLevelACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgOpenTechLevelACK::CopyFrom(const MsgOpenTechLevelACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgOpenTechLevelACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgOpenTechLevelACK::Swap(MsgOpenTechLevelACK* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(en_, other->en_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgOpenTechLevelACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgOpenTechLevelACK_descriptor_;
  metadata.reflection = MsgOpenTechLevelACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgApplyAddTechInfoACK::kLevelFieldNumber;
const int MsgApplyAddTechInfoACK::kIdFieldNumber;
const int MsgApplyAddTechInfoACK::kCurrentFieldNumber;
const int MsgApplyAddTechInfoACK::kEnFieldNumber;
#endif  // !_MSC_VER

MsgApplyAddTechInfoACK::MsgApplyAddTechInfoACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgApplyAddTechInfoACK::InitAsDefaultInstance() {
}

MsgApplyAddTechInfoACK::MsgApplyAddTechInfoACK(const MsgApplyAddTechInfoACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgApplyAddTechInfoACK::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  id_ = 0;
  current_ = 0;
  en_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgApplyAddTechInfoACK::~MsgApplyAddTechInfoACK() {
  SharedDtor();
}

void MsgApplyAddTechInfoACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgApplyAddTechInfoACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgApplyAddTechInfoACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgApplyAddTechInfoACK_descriptor_;
}

const MsgApplyAddTechInfoACK& MsgApplyAddTechInfoACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTechnologyG2C_2eproto();  return *default_instance_;
}

MsgApplyAddTechInfoACK* MsgApplyAddTechInfoACK::default_instance_ = NULL;

MsgApplyAddTechInfoACK* MsgApplyAddTechInfoACK::New() const {
  return new MsgApplyAddTechInfoACK;
}

void MsgApplyAddTechInfoACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    id_ = 0;
    current_ = 0;
    en_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgApplyAddTechInfoACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current;
        break;
      }
      
      // required int32 current = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_en;
        break;
      }
      
      // required .enTechnologyResult en = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_en:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (enTechnologyResult_IsValid(value)) {
            set_en(static_cast< enTechnologyResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgApplyAddTechInfoACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // required int32 current = 3;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current(), output);
  }
  
  // required .enTechnologyResult en = 4;
  if (has_en()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->en(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgApplyAddTechInfoACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // required int32 current = 3;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current(), target);
  }
  
  // required .enTechnologyResult en = 4;
  if (has_en()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->en(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgApplyAddTechInfoACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 current = 3;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current());
    }
    
    // required .enTechnologyResult en = 4;
    if (has_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->en());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgApplyAddTechInfoACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgApplyAddTechInfoACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgApplyAddTechInfoACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgApplyAddTechInfoACK::MergeFrom(const MsgApplyAddTechInfoACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_en()) {
      set_en(from.en());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgApplyAddTechInfoACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgApplyAddTechInfoACK::CopyFrom(const MsgApplyAddTechInfoACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgApplyAddTechInfoACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgApplyAddTechInfoACK::Swap(MsgApplyAddTechInfoACK* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(id_, other->id_);
    std::swap(current_, other->current_);
    std::swap(en_, other->en_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgApplyAddTechInfoACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgApplyAddTechInfoACK_descriptor_;
  metadata.reflection = MsgApplyAddTechInfoACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
